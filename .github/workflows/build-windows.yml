name: Build and Release for Windows

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'
    paths:
      - '**/*.go'
      - 'build-windows.yml'

  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: false
        type: string

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          $latestTag = git describe --tags `git rev-list --tags --max-count=1`
          Write-Output "::set-output name=LATEST_TAG::$latestTag"
        shell: pwsh

      - name: Increment version
        id: increment_version
        run: |
          if ("${{ github.event.inputs.tag }}" -ne "") {
              $newTag = "${{ github.event.inputs.tag }}"
          } elseif ("${{ steps.get_latest_tag.outputs.LATEST_TAG }}" -ne "") {
              $latest = "${{ steps.get_latest_tag.outputs.LATEST_TAG }}"
              if ($latest -match 'v(\d+)\.(\d+)\.(\d+)') {
                  $major = [int]$matches[1]
                  $minor = [int]$matches[2]
                  $patch = [int]$matches[3] + 1
                  $newTag = "v$major.$minor.$patch"
              } else {
                  $newTag = "v0.1.0"
              }
          } else {
              $newTag = "v0.1.0"
          }
          Write-Output "::set-output name=NEW_TAG::$newTag"
        shell: pwsh

      - name: Create and push new tag
        if: github.event.inputs.tag == ''
        run: |
          git tag ${{ steps.increment_version.outputs.NEW_TAG }}
          git push origin ${{ steps.increment_version.outputs.NEW_TAG }}
        shell: pwsh

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            %GOCACHE%
            %GOMODCACHE%
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21.x'

      - name: Set environment variables
        run: |
          echo "GOOS=windows" >> $env:GITHUB_ENV
          echo "GOARCH=amd64" >> $env:GITHUB_ENV

      - name: Build application
        run: go build -o getcourse-video-downloader.exe .

      - name: Determine release tag
        id: determine_release_tag
        run: |
          if ("${{ github.event.inputs.tag }}" -ne "") {
              $releaseTag = "${{ github.event.inputs.tag }}"
          } else {
              $releaseTag = "${{ steps.increment_version.outputs.NEW_TAG }}"
          }
          Write-Output "::set-output name=RELEASE_TAG::$releaseTag"
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_release_tag.outputs.RELEASE_TAG }}
          release_name: Release ${{ steps.determine_release_tag.outputs.RELEASE_TAG }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./getcourse-video-downloader.exe
          asset_name: getcourse-video-downloader.exe
          asset_content_type: application/octet-stream
